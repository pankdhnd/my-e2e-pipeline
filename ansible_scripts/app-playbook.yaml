#Wait till EC2 instance is ready
- name: Wait for ec2 instance to be ready
  hosts: aws_ec2
  gather_facts: false  
  tasks: 
  - name: Wait for port 22 to be accessible
    wait_for:
      port: 22
      delay: 60
      timeout: 100
      search_regex: OpenSSH
      host: '{{ (ansible_ssh_host|default(ansible_host))|default(inventory_hostname) }}'
    vars: 
      ansible_connection: local
      ansible_python_interpreter: /usr/bin/python3

#Install NodeJS and npm
- name: Install NodeJS and npm
  hosts: aws_ec2
  become: True
 #become_method: sudo
  vars: 
      ansible_python_interpreter: /usr/bin/python3
  tasks:
  - name: Perform sudo apt update     
    apt: update_cache=yes force_apt_get=yes cache_valid_time=3600
  - name: Insatll NodeJs and npm
    apt:
      pkg:
      - nodejs
      - npm

# Deploy nodejs application tar file
- name: Deploy NodeJs application
  hosts: aws_ec2
  vars: 
      ansible_python_interpreter: /usr/bin/python3
  vars_files:
  - ansible_vars.yaml
  tasks:
  - name: Copy and unpack tar file
    unarchive:
      src: "..{{NODE_PACKAGE_NAME}}"   #Source is local machine. Unarchieve will copy file to remote, and will then un-tar it.
      dest: "{{REMOTE_PATH}}"
  - name: Install dependencies using npm
    npm:
      path: "{{REMOTE_PATH}}/app"
  - name: Start the application
    command: 
      chdir: "{{REMOTE_PATH}}/app"
      cmd: node app.js
    async: 1000  #To run command in ansynchronous manner. Otherwise our playbook execution would never stop.
    poll: 0
  - name: Check if application is running
    shell:
      cmd: ps aux | grep node
    register: app_status #We defined a variable here, which will store the output of cmd. As the command is executed on remote, it is not possible to check its status directly.
  - debug: msg={{app_status.stdout_lines}}